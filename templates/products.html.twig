<div id="productBookshelf" class="container">
    <!-- Search Bar -->
    <div class="row mt-4">
        <div class="col-md-6 offset-md-3">
            <div class="input-group">
                <input type="text"
                       id="searchInput"
                       class="form-control"
                       placeholder="{{ 'search.placeholder'|trans }}"
                       aria-label="{{ 'search.placeholder'|trans }}">
            </div>
        </div>
    </div>

    <div class="pagination-controls mt-4">
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item" id="prevPageItem">
                    <button class="page-link" id="prevPage">{{ 'navigation.previous'|trans }}</button>
                </li>
                <li class="page-item" id="nextPageItem">
                    <button class="page-link" id="nextPage">{{ 'navigation.next'|trans }}</button>
                </li>
            </ul>
        </nav>
    </div>
    <div class="row product-grid">
        <!-- Products will be dynamically inserted here in two rows -->
    </div>
    <div class="pagination-controls mt-4">
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item" id="prevPageItem2">
                    <button class="page-link" id="prevPage">{{ 'navigation.previous'|trans }}</button>
                </li>
                <li class="page-item" id="nextPageItem2">
                    <button class="page-link" id="nextPage">{{ 'navigation.next'|trans }}</button>
                </li>
            </ul>
        </nav>
    </div>

    <!-- Product Details Modal -->
    <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">{{ 'product.details'|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <img id="modalProductImage" src="" alt="" class="img-fluid mb-3">
                            <div id="modalProductDimensions" class="small text-muted"></div>
                        </div>
                        <div class="col-md-6">
                            <h2 id="modalProductTitle" class="h4"></h2>
                            <div id="modalProductDescription" class="mt-3"></div>
                            <p id="modalProductStock" class="mt-3"></p>
                            <p id="modalProductPrice" class="mt-3 fw-bold h4"></p>
                            <button id="modalAddToCart" class="btn btn-success w-100 mt-3">
                                {{ 'cart.add_to_cart'|trans }}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productGrid = document.querySelector('.product-grid');
        const prevPageButtons = document.querySelectorAll('#prevPage');
        const nextPageButtons = document.querySelectorAll('#nextPage');
        const prevPageItems = document.querySelectorAll('#prevPageItem, #prevPageItem2');
        const nextPageItems = document.querySelectorAll('#nextPageItem, #nextPageItem2');
        const searchInput = document.getElementById('searchInput');
        const productModal = new bootstrap.Modal(document.getElementById('productModal'));
        let currentPage = 1;
        const limit = 8;
        let currentSearch = '';

        function addToCart(productId, event) {
            if (event) {
                event.stopPropagation(); // Prevent modal from opening when clicking add to cart
            }

            const token = sessionStorage.getItem('jwt');
            if (!token) {
                window.location.href = `/${(productBookshelf.dataset.locale || 'en')}/login`;
                return;
            }

            fetch('/api/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    product_id: productId,
                    quantity: 1
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        updateCart();
                    }
                })
                .catch(error => console.error('Error adding to cart:', error));
        }

        function loadProductDetails(productId) {
            const locale = getCurrentLocale();
            fetch(`/api/products/${productId}?locale=${locale}`)
                .then(response => response.json())
                .then(product => {
                    const titleKey = `title_${locale}`; // Using direct locale key matching

                    // Update modal elements
                    document.getElementById('modalProductTitle').textContent =
                        product[titleKey] || product.title_en || 'Title not available';

                    document.getElementById('modalProductImage').src =
                        product.image || '{{ asset("images/product.jpeg") }}';
                    document.getElementById('modalProductImage').alt =
                        product[titleKey] || product.title_en || 'Product image';

                    document.getElementById('modalProductPrice').textContent =
                        `${product.oxprice} €`;

                    // Display dimensions if available
                    const dimensionsElement = document.getElementById('modalProductDimensions');
                    if (product.length || product.width || product.height) {
                        dimensionsElement.textContent =
                            `{{ 'product.dimensions'|trans }}: ${product.length || 0} × ${product.width || 0} × ${product.height || 0} cm`;
                    } else {
                        dimensionsElement.textContent = '';
                    }

                    // Handle features/description
                    const descriptionElement = document.getElementById('modalProductDescription');
                    if (product.features_json && product.features_json.features && product.features_json.features.length > 0) {
                        const featuresList = document.createElement('ul');
                        featuresList.className = 'list-unstyled';

                        product.features_json.features.forEach(feature => {
                            if (feature.desc) {
                                const li = document.createElement('li');
                                li.className = 'mb-2';
                                li.innerHTML = feature.desc; // Using innerHTML to preserve HTML formatting
                                featuresList.appendChild(li);
                            }
                        });

                        descriptionElement.innerHTML = ''; // Clear existing content
                        descriptionElement.appendChild(featuresList);
                    } else {
                        descriptionElement.textContent = '{{ 'product.no_description'|trans }}';
                    }

                    // Update stock status
                    const stockElement = document.getElementById('modalProductStock');
                    const addToCartButton = document.getElementById('modalAddToCart');

                    if (product.stock <= 0) {
                        stockElement.textContent = '{{ 'product.out_of_stock'|trans }}';
                        stockElement.className = 'mt-3 text-danger';
                        addToCartButton.disabled = true;
                    } else {
                        stockElement.textContent = `{{ 'product.stock'|trans }}: ${product.stock}`;
                        stockElement.className = 'mt-3 text-success';
                        addToCartButton.disabled = false;
                    }

                    addToCartButton.onclick = (e) => addToCart(product.id, e);

                    productModal.show();
                })
                .catch(error => console.error('Error loading product details:', error));
        }

        function loadProducts(page, search = '') {
            const locale = getCurrentLocale();
            fetch(`/api/products?page=${page}&limit=${limit}&search=${encodeURIComponent(search)}&locale=${locale}`)
                .then(response => response.json())
                .then(data => {
                    currentPage = data.currentPage;
                    updatePaginationButtons(data.currentPage, data.totalPages);
                    displayProducts(data.products);
                })
                .catch(error => console.error('Error loading products:', error));
        }

        function displayProducts(products) {
            productGrid.innerHTML = '';
            const currentLocale = getCurrentLocale();

            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.classList.add('col-md-6', 'col-lg-3', 'mb-4');

                const titleKey = `title_${currentLocale}`; // Updated to match API response format
                let productTitle = product[titleKey] || product.title_en || 'Title not available';

                productCard.innerHTML = `
                    <div class="product-card cursor-pointer" data-product-id="${product.id}">
                        <img src="${product.image || '{{ asset("images/product.jpeg") }}'}"
                             alt="${productTitle}"
                             class="product-image">
                        <h5 class="product-title" title="${productTitle}">${productTitle}</h5>
                        <p class="product-stock ${product.stock <= 0 ? 'out-of-stock text-danger' : 'text-success'}">
                            ${product.stock <= 0 ? '{{ 'product.out_of_stock'|trans }}' : '{{ 'product.stock'|trans }}: ' + product.stock}
                        </p>
                        <p class="product-price">${product.oxprice} €</p>
                        <div class="d-grid gap-2">
                            <button class="btn btn-success add-to-cart" data-product-id="${product.id}"
                                    ${product.stock <= 0 ? 'disabled' : ''}>
                                {{ 'cart.add_to_cart'|trans }}
                            </button>
                        </div>
                    </div>
                `;
                productGrid.appendChild(productCard);
            });
        }

        function updatePaginationButtons(currentPage, totalPages) {
            prevPageItems.forEach(item => {
                item.style.display = currentPage <= 1 ? 'none' : 'list-item';
            });

            nextPageItems.forEach(item => {
                item.style.display = currentPage >= totalPages ? 'none' : 'list-item';
            });
        }

        function handleSearch() {
            currentSearch = searchInput.value.trim();
            if (currentSearch.length < 2) {
                return;
            }
            currentPage = 1;
            loadProducts(currentPage, currentSearch);
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Event Listeners
        productGrid.addEventListener('click', (e) => {
            const productCard = e.target.closest('.product-card');
            const addToCartButton = e.target.closest('.add-to-cart');

            if (addToCartButton) {
                const productId = addToCartButton.dataset.productId;
                addToCart(productId, e);
            } else if (productCard) {
                const productId = productCard.dataset.productId;
                loadProductDetails(productId);
            }
        });

        prevPageButtons.forEach(button => {
            button.addEventListener('click', () => {
                if (currentPage > 1) {
                    loadProducts(currentPage - 1, currentSearch);
                }
            });
        });

        nextPageButtons.forEach(button => {
            button.addEventListener('click', () => {
                loadProducts(currentPage + 1, currentSearch);
            });
        });

        const debouncedSearch = debounce(handleSearch, 500);
        searchInput.addEventListener('input', debouncedSearch);

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSearch();
            }
        });

        // Initial load
        loadProducts(currentPage, currentSearch);
    });
</script>
