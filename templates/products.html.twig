<div id="productBookshelf" class="container" data-locale="{{ app.request.locale }}">
    <div class="row product-grid">
        <!-- Products will be dynamically inserted here in two rows -->
    </div>
    <div class="pagination-controls mt-4">
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item">
                    <button class="page-link" id="prevPage">{{ 'navigation.previous'|trans }}</button>
                </li>
                <li class="page-item">
                    <button class="page-link" id="nextPage">{{ 'navigation.next'|trans }}</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Updated modal code -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content will be dynamically inserted here -->
            </div>
        </div>
    </div>
</div>

<style>
    #productBookshelf {
        padding-top: 80px;
    }

    .product-card {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 8px;
        transition: transform 0.2s;
        cursor: pointer;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .product-image {
        width: 100%;
        height: 200px;
        object-fit: contain;
        margin-bottom: 15px;
    }

    .product-stock {
        color: #28a745;
    }

    .product-stock.out-of-stock {
        color: #dc3545;
    }

    .product-price {
        font-weight: bold;
        font-size: 1.2em;
        color: #007bff;
    }

    .product-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }

    /* New modal styles */
    .modal-content {
        background-color: white;
        color: #333;
    }

    .modal-body img {
        max-width: 100%;
        height: auto;
        object-fit: contain;
    }

    .product-properties {
        padding: 20px;
    }

    .product-properties p {
        margin-bottom: 10px;
    }

    .json-properties {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        white-space: pre-wrap;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productGrid = document.querySelector('.product-grid');
        const prevPageBtn = document.getElementById('prevPage');
        const nextPageBtn = document.getElementById('nextPage');

        let currentPage = 1;
        const limit = 8;

        function loadProducts(page) {
            fetch(`/api/products?page=${page}&limit=${limit}`)
                .then(response => response.json())
                .then(data => {
                    currentPage = data.currentPage;
                    updatePaginationButtons(data.currentPage, data.totalPages);
                    displayProducts(data.products);
                });
        }

        function displayProducts(products) {
            productGrid.innerHTML = '';

            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.classList.add('col-md-6', 'col-lg-3', 'mb-4');

                const currentLocale = document.getElementById('productBookshelf').dataset.locale;
                const browserLang = (currentLocale || 'en').toLowerCase();
                const langKey = browserLang.charAt(0).toUpperCase() + browserLang.slice(1);
                const titleKey = `title${langKey}`;

                let productTitle = '';
                if (product[titleKey]) {
                    productTitle = product[titleKey];
                } else if (product.titleEn) {
                    productTitle = product.titleEn;
                } else {
                    productTitle = 'Title not available';
                }

                productCard.innerHTML = `
                    <div class="product-card" data-product-id="${product.id}">
                        <img src="${product.image || '{{ asset("images/product.jpeg") }}'}"
                             alt="${productTitle}"
                             class="product-image">
                        <h5 class="product-title" title="${productTitle}">${productTitle}</h5>
                        <p class="product-stock ${product.stock <= 0 ? 'out-of-stock' : ''}">
                            ${product.stock <= 0 ? '{{ 'product.out_of_stock'|trans }}' : '{{ 'product.stock'|trans }}: ' + product.stock}
                        </p>
                        <p class="product-price">${product.oxprice} €</p>
                        <button class="btn btn-primary btn-block view-details">
                            {{ 'product.details'|trans }}
                        </button>
                    </div>
                `;
                productGrid.appendChild(productCard);
            });
        }

        function updatePaginationButtons(currentPage, totalPages) {
            prevPageBtn.disabled = currentPage <= 1;
            nextPageBtn.disabled = currentPage >= totalPages;
        }

        function formatJSON(jsonString) {
            try {
                const obj = JSON.parse(jsonString);
                return JSON.stringify(obj, null, 2);
            } catch (e) {
                return jsonString;
            }
        }

        function showProductDetails(productId) {
            fetch(`/api/products/${productId}`)
                .then(response => response.json())
                .then(data => {
                    const modalBody = document.querySelector('#productModal .modal-body');
                    const currentLocale = document.getElementById('productBookshelf').dataset.locale;
                    const browserLang = (currentLocale || 'en').toLowerCase();
                    const langKey = browserLang.charAt(0).toUpperCase() + browserLang.slice(1);
                    const languageCode = langKey || 'en';

                    let productTitle = "";
                    if (data[languageCode]) {
                        productTitle = data[languageCode];
                    } else if (data.titleEn) {
                        productTitle = data.titleEn;
                    } else {
                        productTitle = 'Title not available';
                    }

                    modalBody.innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <img src="${data.image || '{{ asset("images/product.jpeg") }}'}"
                                     class="img-fluid" alt="${productTitle}">
                            </div>
                            <div class="col-md-6 product-properties">
                                <h4>${productTitle}</h4>
                                <p><strong>Item:</strong> ${data.item}</p>
                                <p><strong>Price:</strong> ${data.oxprice} €</p>
                                <p><strong>Stock:</strong> ${data.stock}</p>
                                <p><strong>Dimensions:</strong> ${data.length}x${data.width}x${data.height}</p>
                                <p><strong>Weight:</strong> ${data.weight}</p>
                                ${data.features_json ? `
                                    <div class="json-properties">
                                        <strong>Features:</strong>
                                        <pre>${formatJSON(data.features_json)}</pre>
                                    </div>` : ''}
                            </div>
                        </div>
                    `;

                    const modal = new bootstrap.Modal(document.getElementById('productModal'));
                    modal.show();
                });
        }

        // Event Listeners
        prevPageBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                loadProducts(currentPage - 1);
            }
        });

        nextPageBtn.addEventListener('click', () => {
            loadProducts(currentPage + 1);
        });

        productGrid.addEventListener('click', (e) => {
            const productCard = e.target.closest('.product-card');
            if (productCard) {
                const productId = productCard.dataset.productId;
                showProductDetails(productId);
            }
        });

        // Initial load
        loadProducts(currentPage);
    });
</script>
