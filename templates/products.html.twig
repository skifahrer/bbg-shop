<div id="productBookshelf" class="container">
    <!-- Search Bar -->
    <div class="row mt-4">
        <div class="col-md-6 offset-md-3">
            <div class="input-group">
                <input type="text"
                       id="searchInput"
                       class="form-control"
                       placeholder="{{ 'search.placeholder'|trans }}"
                       aria-label="{{ 'search.placeholder'|trans }}">
            </div>
        </div>
    </div>

    <div class="pagination-controls mt-4">
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item" id="prevPageItem">
                    <button class="page-link" id="prevPage">{{ 'navigation.previous'|trans }}</button>
                </li>
                <li class="page-item" id="nextPageItem">
                    <button class="page-link" id="nextPage">{{ 'navigation.next'|trans }}</button>
                </li>
            </ul>
        </nav>
    </div>
    <div class="row product-grid">
        <!-- Products will be dynamically inserted here in two rows -->
    </div>
    <div class="pagination-controls mt-4">
        <nav aria-label="Product navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item" id="prevPageItem2">
                    <button class="page-link" id="prevPage">{{ 'navigation.previous'|trans }}</button>
                </li>
                <li class="page-item" id="nextPageItem2">
                    <button class="page-link" id="nextPage">{{ 'navigation.next'|trans }}</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productGrid = document.querySelector('.product-grid');
        const prevPageButtons = document.querySelectorAll('#prevPage');
        const nextPageButtons = document.querySelectorAll('#nextPage');
        const prevPageItems = document.querySelectorAll('#prevPageItem, #prevPageItem2');
        const nextPageItems = document.querySelectorAll('#nextPageItem, #nextPageItem2');
        const searchInput = document.getElementById('searchInput');
        let currentPage = 1;
        const limit = 8;
        let currentSearch = '';

        function addToCart(productId) {
            const token = sessionStorage.getItem('jwt');
            if (!token) {
                window.location.href = `/${(productBookshelf.dataset.locale || 'en')}/login`;
                return;
            }

            fetch('/api/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    product_id: productId,
                    quantity: 1
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        // Trigger cart update
                        updateCart();
                    }
                })
                .catch(error => console.error('Error adding to cart:', error));
        }

        function loadProducts(page, search = '') {
            const locale = getCurrentLocale();
            fetch(`/api/products?page=${page}&limit=${limit}&search=${encodeURIComponent(search)}&locale=${locale}`)
                .then(response => response.json())
                .then(data => {
                    currentPage = data.currentPage;
                    updatePaginationButtons(data.currentPage, data.totalPages);
                    displayProducts(data.products);
                })
                .catch(error => console.error('Error loading products:', error));
        }

        function displayProducts(products) {
            productGrid.innerHTML = '';
            const currentLocale = getCurrentLocale();

            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.classList.add('col-md-6', 'col-lg-3', 'mb-4');

                const titleKey = `title${currentLocale.charAt(0).toUpperCase() + currentLocale.slice(1)}`;
                let productTitle = product[titleKey] || 'Title not available';

                productCard.innerHTML = `
                    <div class="product-card" data-product-id="${product.id}">
                        <img src="${product.image || '{{ asset("images/product.jpeg") }}'}"
                             alt="${productTitle}"
                             class="product-image">
                        <h5 class="product-title" title="${productTitle}">${productTitle}</h5>
                        <p class="product-stock ${product.stock <= 0 ? 'out-of-stock' : ''}">
                            ${product.stock <= 0 ? '{{ 'product.out_of_stock'|trans }}' : '{{ 'product.stock'|trans }}: ' + product.stock}
                        </p>
                        <p class="product-price">${product.oxprice} â‚¬</p>
                        <div class="d-grid gap-2">
                            <button class="btn btn-success add-to-cart" data-product-id="${product.id}"
                                    ${product.stock <= 0 ? 'disabled' : ''}>
                                {{ 'cart.add_to_cart'|trans }}
                            </button>
                        </div>
                    </div>
                `;
                productGrid.appendChild(productCard);
            });
        }

        function updatePaginationButtons(currentPage, totalPages) {
            // Handle Previous buttons visibility
            prevPageItems.forEach(item => {
                item.style.display = currentPage <= 1 ? 'none' : 'list-item';
            });

            // Handle Next buttons visibility
            nextPageItems.forEach(item => {
                item.style.display = currentPage >= totalPages ? 'none' : 'list-item';
            });
        }

        // Search functionality
        function handleSearch() {
            currentSearch = searchInput.value.trim();
            if (currentSearch.length < 2) {
                return; // Do not search if less than 2 characters
            }
            currentPage = 1;
            loadProducts(currentPage, currentSearch);
        }

        // Debounce function to limit API calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Event Listeners
        productGrid.addEventListener('click', (e) => {
            const addToCartButton = e.target.closest('.add-to-cart');
            if (addToCartButton) {
                const productId = addToCartButton.dataset.productId;
                addToCart(productId);
            }
        });

        prevPageButtons.forEach(button => {
            button.addEventListener('click', () => {
                if (currentPage > 1) {
                    loadProducts(currentPage - 1, currentSearch);
                }
            });
        });

        nextPageButtons.forEach(button => {
            button.addEventListener('click', () => {
                loadProducts(currentPage + 1, currentSearch);
            });
        });

        // Debounced search for input typing
        const debouncedSearch = debounce(handleSearch, 500);
        searchInput.addEventListener('input', debouncedSearch);

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSearch();
            }
        });

        // Initial load
        loadProducts(currentPage, currentSearch);
    });
</script>
