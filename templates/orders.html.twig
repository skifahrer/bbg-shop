<!-- Status translations mapping -->
<script>
    const STATUS_TRANSLATIONS = {
        pending: '{{ "statuses.pending"|trans }}',
        paid: '{{ "statuses.paid"|trans }}',
        processing: '{{ "statuses.processing"|trans }}',
        completed: '{{ "statuses.completed"|trans }}',
        shipped: '{{ "statuses.shipped"|trans }}',
        cancelled: '{{ "statuses.cancelled"|trans }}'
    };
</script>

<!-- Orders Modal -->
<div class="modal fade" id="ordersModal" tabindex="-1" aria-labelledby="ordersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ordersModalLabel">{{ 'orders.list'|trans }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Orders List Column -->
                    <div id="ordersListColumn" class="col-12">
                        <div id="ordersList" class="list-group">
                            <!-- Orders will be populated here -->
                        </div>
                    </div>
                    <!-- Order Details Column (initially hidden) -->
                    <div id="orderDetailsColumn" class="col-6 d-none border-start">
                        <div id="orderDetailsContent">
                            <!-- Order details will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .status-badge {
        padding: 0.35em 0.65em;
        border-radius: 20px;
        font-size: 0.875em;
        font-weight: 500;
    }
    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }
    .status-paid {
        background-color: #e2e3e5;
        color: #383d41;
    }
    .status-processing {
        background-color: #cce5ff;
        color: #004085;
    }
    .status-completed {
        background-color: #d1e7dd;
        color: #0f5132;
    }
    .status-shipped {
        background-color: #d4edda;
        color: #155724;
    }
    .status-cancelled {
        background-color: #f8d7da;
        color: #721c24;
    }
    .order-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        padding: 0.25rem 0.5rem;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
    }
    .order-item {
        transition: background-color 0.15s ease-in-out;
        cursor: pointer;
    }
    .order-item:hover {
        background-color: #f8f9fa;
    }
    .order-details-section {
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        padding: 1.25rem;
        margin-bottom: 1.5rem;
    }
    .order-items-table {
        background-color: #fff;
        border-radius: 0.5rem;
    }
    .table-total-row {
        background-color: #f8f9fa;
        font-weight: 600;
    }
    /* New styles for clickable items */
    .order-item .btn {
        position: relative;
        z-index: 2;
    }
    .order-item .status-badge {
        position: relative;
        z-index: 2;
    }
</style>

<script>
    let ordersModal = null;

    document.addEventListener('DOMContentLoaded', function() {
        ordersModal = new bootstrap.Modal(document.getElementById('ordersModal'));
    });

    function getStatusBadgeClass(status) {
        const statusMap = {
            pending: 'status-pending',
            paid: 'status-paid',
            processing: 'status-processing',
            completed: 'status-completed',
            shipped: 'status-shipped',
            cancelled: 'status-cancelled'
        };
        return statusMap[status.toLowerCase()] || '';
    }

    function getStatusTranslation(status) {
        return STATUS_TRANSLATIONS[status.toLowerCase()] || status;
    }

    function formatPrice(price) {
        return new Intl.NumberFormat('de-DE', {
            style: 'currency',
            currency: 'EUR',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(price);
    }

    function formatAddress(addressString) {
        try {
            const address = JSON.parse(addressString);
            return `
                <div class="address-block mb-2">
                    <p class="fw-medium mb-1">${address.name}</p>
                    <p class="mb-1">${address.street}</p>
                    <p class="mb-1">${address.city}, ${address.postal_code}</p>
                </div>
            `;
        } catch (e) {
            return '';
        }
    }

    function showOrdersList() {
        const ordersListEl = document.getElementById('ordersList');
        document.getElementById('ordersListColumn').className = 'col-12';
        document.getElementById('orderDetailsColumn').className = 'col-6 d-none border-start';

        const ordersHtml = userOrders.map(order => `
            <div class="list-group-item order-item" onclick="showOrderDetails('${order.id}')">
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <div>
                        <h5 class="mb-1">{{ 'orders.order'|trans }} #${order.id}</h5>
                        <p class="text-muted mb-0">
                            <i class="bi bi-calendar3"></i> ${new Date(order.createdAt).toLocaleDateString()}
                        </p>
                    </div>
                    <span class="status-badge ${getStatusBadgeClass(order.status)}">
                        ${getStatusTranslation(order.status)}
                    </span>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <span class="order-price">
                        <i class="bi bi-tag-fill me-1"></i>
                        ${formatPrice(order.finalPrice)}
                    </span>
                </div>
            </div>
        `).join('');

        ordersListEl.innerHTML = ordersHtml;
        ordersModal.show();
    }

    async function showOrderDetails(orderId) {
        const token = sessionStorage.getItem('jwt');
        try {
            const orderDetailsContent = document.getElementById('orderDetailsContent');
            orderDetailsContent.innerHTML = `
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            document.getElementById('ordersListColumn').className = 'col-6';
            document.getElementById('orderDetailsColumn').className = 'col-6 border-start';

            const response = await fetch(`/api/orders/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch order details');
            }

            const data = await response.json();
            const order = data.order;

            // Calculate order total
            const subtotal = order.items.reduce((sum, item) =>
                sum + (item.product.price * item.quantity), 0
            );

            // Generate items HTML
            const itemsHtml = order.items.map(item => `
                <tr>
                    <td>
                        <div class="fw-medium">${item.product.name}</div>
                        ${item.product.sku ? `<small class="text-muted">SKU: ${item.product.sku}</small>` : ''}
                    </td>
                    <td class="text-center">${item.quantity}</td>
                    <td class="text-end">${formatPrice(item.product.price)}</td>
                    <td class="text-end">${formatPrice(item.product.price * item.quantity)}</td>
                </tr>
            `).join('');

            // Update details content
            orderDetailsContent.innerHTML = `
                <div class="order-details-section">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h5 class="mb-1">{{ 'orders.orderInfo'|trans }}</h5>
                            <p class="text-muted mb-0">
                                <i class="bi bi-calendar3"></i> ${new Date(order.createdAt).toLocaleDateString()}
                            </p>
                        </div>
                        <span class="status-badge ${getStatusBadgeClass(order.status)}">
                            ${getStatusTranslation(order.status)}
                        </span>
                    </div>
                </div>

                ${order.shippingAddress ? `
                    <div class="order-details-section">
                        <h6 class="mb-3">
                            <i class="bi bi-truck me-2"></i>
                            {{ 'orders.shippingAddress'|trans }}
                        </h6>
                        ${formatAddress(order.shippingAddress)}
                    </div>
                ` : ''}

                ${order.invoiceAddress ? `
                    <div class="order-details-section">
                        <h6 class="mb-3">
                            <i class="bi bi-file-text me-2"></i>
                            {{ 'orders.invoiceAddress'|trans }}
                        </h6>
                        ${formatAddress(order.invoiceAddress)}
                    </div>
                ` : ''}

                <div class="order-items-table">
                    <h6 class="mb-3">
                        <i class="bi bi-cart me-2"></i>
                        {{ 'orders.items'|trans }}
                    </h6>
                    <div class="table-responsive">
                        <table class="table">
                            <thead class="table-light">
                                <tr>
                                    <th>{{ 'orders.product'|trans }}</th>
                                    <th class="text-center">{{ 'orders.quantity'|trans }}</th>
                                    <th class="text-end">{{ 'orders.price'|trans }}</th>
                                    <th class="text-end">{{ 'orders.subtotal'|trans }}</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${itemsHtml}
                                <tr class="table-total-row">
                                    <td colspan="3" class="text-end">{{ 'orders.total'|trans }}</td>
                                    <td class="text-end">${formatPrice(order.finalPrice)}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                ${order.notes ? `
                    <div class="order-details-section mt-3">
                        <h6 class="mb-2">
                            <i class="bi bi-pencil me-2"></i>
                            {{ 'orders.notes'|trans }}
                        </h6>
                        <p class="mb-0">${order.notes}</p>
                    </div>
                ` : ''}
            `;
        } catch (error) {
            console.error('Error fetching order details:', error);
            orderDetailsContent.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    {{ 'orders.errorLoading'|trans }}
                </div>
            `;
        }
    }
</script>
