<!-- Orders Modal -->
<div class="modal fade" id="ordersModal" tabindex="-1" aria-labelledby="ordersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ordersModalLabel">{{ 'orders.list'|trans }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Orders List Column -->
                    <div id="ordersListColumn" class="col-12">
                        <div id="ordersList" class="list-group">
                            <!-- Orders will be populated here -->
                        </div>
                    </div>
                    <!-- Order Details Column (initially hidden) -->
                    <div id="orderDetailsColumn" class="col-6 d-none border-start">
                        <div id="orderDetailsContent">
                            <!-- Order details will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .status-badge {
        padding: 0.35em 0.65em;
        border-radius: 20px;
        font-size: 0.875em;
        font-weight: 500;
    }
    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }
    .status-processing {
        background-color: #cce5ff;
        color: #004085;
    }
    .status-shipped {
        background-color: #d4edda;
        color: #155724;
    }
    .status-delivered {
        background-color: #d1e7dd;
        color: #0f5132;
    }
    .status-cancelled {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>

<script>
    let ordersModal = null;

    document.addEventListener('DOMContentLoaded', function() {
        ordersModal = new bootstrap.Modal(document.getElementById('ordersModal'));
    });

    function getStatusBadgeClass(status) {
        const statusMap = {
            pending: 'status-pending',
            processing: 'status-processing',
            shipped: 'status-shipped',
            delivered: 'status-delivered',
            cancelled: 'status-cancelled'
        };
        return statusMap[status.toLowerCase()] || '';
    }

    function formatAddress(addressString) {
        try {
            const address = JSON.parse(addressString);
            return `
                <div class="mb-2">
                    <p class="fw-medium mb-1">${address.name}</p>
                    <p class="mb-1">${address.street}</p>
                    <p class="mb-1">${address.city}, ${address.postal_code}</p>
                </div>
            `;
        } catch (e) {
            return '';
        }
    }

    function showOrdersList() {
        const ordersListEl = document.getElementById('ordersList');
        // Reset columns to initial state
        document.getElementById('ordersListColumn').className = 'col-12';
        document.getElementById('orderDetailsColumn').className = 'col-6 d-none border-start';

        const ordersHtml = userOrders.map(order => `
            <div class="list-group-item">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <div>
                        <h5 class="mb-1">{{ 'orders.order'|trans }} #${order.id}</h5>
                        <p class="text-muted mb-1">${order.createdAt}</p>
                    </div>
                    <span class="status-badge ${getStatusBadgeClass(order.status)}">
                        ${order.status}
                    </span>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <p class="mb-0 fw-bold">{{ 'orders.total'|trans }}: ${order.finalPrice} Eur</p>
                    <button class="btn btn-primary btn-sm" onclick="showOrderDetails('${order.id}')">
                        {{ 'orders.details'|trans }}
                        <i class="bi bi-arrow-right ms-1"></i>
                    </button>
                </div>
            </div>
        `).join('');

        ordersListEl.innerHTML = ordersHtml;
        ordersModal.show();
    }

    async function showOrderDetails(orderId) {
        const token = sessionStorage.getItem('jwt');
        try {
            // Show loading spinner in details column
            const orderDetailsContent = document.getElementById('orderDetailsContent');
            orderDetailsContent.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            // Show details column and adjust list column width
            document.getElementById('ordersListColumn').className = 'col-6';
            document.getElementById('orderDetailsColumn').className = 'col-6 border-start';

            // Fetch order details from API
            const response = await fetch(`/api/orders/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Failed to fetch order details');
            }

            const data = await response.json();
            const order = data.order;

            // Generate items HTML
            const itemsHtml = order.items.map(item => `
                <tr>
                    <td>${item.product.name}</td>
                    <td>${item.quantity}</td>
                    <td>${item.product.price} Eur</td>
                    <td>${(item.product.price * item.quantity).toFixed(2)} Eur</td>
                </tr>
            `).join('');

            // Update details content
            orderDetailsContent.innerHTML = `
                <div class="order-info mb-4">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <h5>{{ 'orders.orderInfo'|trans }}</h5>
                        <span class="status-badge ${getStatusBadgeClass(order.status)}">
                            ${order.status}
                        </span>
                    </div>
                    <p>
                        <strong>{{ 'orders.date'|trans }}:</strong> ${order.createdAt}<br>
                        <strong>{{ 'orders.total'|trans }}:</strong> ${order.finalPrice} Eur
                    </p>

                    ${order.shippingAddress ? `
                        <h6 class="mt-4">{{ 'orders.shippingAddress'|trans }}</h6>
                        ${formatAddress(order.shippingAddress)}
                    ` : ''}

                    ${order.invoiceAddress ? `
                        <h6 class="mt-4">{{ 'orders.invoiceAddress'|trans }}</h6>
                        ${formatAddress(order.invoiceAddress)}
                    ` : ''}
                </div>
                <div class="order-items">
                    <h6>{{ 'orders.items'|trans }}</h6>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>{{ 'orders.product'|trans }}</th>
                                    <th>{{ 'orders.quantity'|trans }}</th>
                                    <th>{{ 'orders.price'|trans }}</th>
                                    <th>{{ 'orders.subtotal'|trans }}</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${itemsHtml}
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error('Error fetching order details:', error);
            orderDetailsContent.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    {{ 'orders.errorLoading'|trans }}
                </div>
            `;
        }
    }
</script>
