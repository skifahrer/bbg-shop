{% extends 'base.html.twig' %}

{% block title %}{{ 'cart.checkout'|trans }}{% endblock %}

{% block body %}
    <div class="container my-5">
        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>{{ 'checkout.shipping_address'|trans }}</h4>
                    </div>
                    <div class="card-body">
                        <form id="shippingAddressForm">
                            <div class="mb-3">
                                <label class="form-label">{{ 'checkout.full_name'|trans }}</label>
                                <input type="text" class="form-control" id="shippingName" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">{{ 'checkout.street'|trans }}</label>
                                <input type="text" class="form-control" id="shippingStreet" required>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">{{ 'checkout.city'|trans }}</label>
                                    <input type="text" class="form-control" id="shippingCity" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">{{ 'checkout.postal_code'|trans }}</label>
                                    <input type="text" class="form-control" id="shippingPostal" required>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h4>{{ 'checkout.invoice_address'|trans }}</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="sameAsShipping">
                                <label class="form-check-label" for="sameAsShipping">
                                    {{ 'checkout.same_as_shipping'|trans }}
                                </label>
                            </div>
                        </div>
                        <form id="invoiceAddressForm">
                            <div class="mb-3">
                                <label class="form-label">{{ 'checkout.full_name'|trans }}</label>
                                <input type="text" class="form-control" id="invoiceName" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">{{ 'checkout.street'|trans }}</label>
                                <input type="text" class="form-control" id="invoiceStreet" required>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">{{ 'checkout.city'|trans }}</label>
                                    <input type="text" class="form-control" id="invoiceCity" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">{{ 'checkout.postal_code'|trans }}</label>
                                    <input type="text" class="form-control" id="invoicePostal" required>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h4>{{ 'checkout.payment_method'|trans }}</h4>
                    </div>
                    <div class="card-body">
                        {% for paymentType in paymentTypes %}
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="paymentType" id="payment{{ paymentType.value|capitalize }}" value="{{ paymentType.value }}" {% if loop.first %}checked{% endif %}>
                                <label class="form-check-label" for="payment{{ paymentType.value|capitalize }}">
                                    {{ ('checkout.payment_' ~ paymentType.value)|trans }}
                                </label>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>

            <div class="col-md-4" id="summary">
                <div class="card">
                    <div class="card-header">
                        <h4>{{ 'checkout.order_summary'|trans }}</h4>
                    </div>
                    <div class="card-body">
                        <div id="checkoutItems">
                            <!-- Items will be inserted here -->
                        </div>

                        <button class="btn btn-secondary" id="edit-cart" data-bs-toggle="modal" data-bs-target="#cartModal">{{ 'common.edit'|trans }}</button>
                        <hr>
                        <div class="d-flex justify-content-between mb-2">
                            <strong>{{ 'checkout.total'|trans }}:</strong>
                            <span id="checkoutTotal">0.00 â‚¬</span>
                        </div>
                        <button id="placeOrderBtn" class="btn btn-primary w-100">{{ 'checkout.place_order'|trans }}</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">{{ 'common.error'|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="errorModalBody">
                    <!-- Error message will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="close-error-modal" data-bs-dismiss="modal">{{ 'common.close'|trans }}</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">{{ 'checkout.order_placed'|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="successModalBody">
                    <!-- Order details will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="dismissSuccessModal">{{ 'common.close'|trans }}</button>
                </div>
            </div>
        </div>
    </div>
    <script>

        function getStatusBadgeClass(status) {
            const statusMap = {
                pending: 'status-pending',
                paid: 'status-paid',
                processing: 'status-processing',
                completed: 'status-completed',
                shipped: 'status-shipped',
                cancelled: 'status-cancelled'
            };
            return statusMap[status.toLowerCase()] || '';
        }

        function getStatusTranslation(status) {
            return STATUS_TRANSLATIONS[status.toLowerCase()] || status;
        }

        document.addEventListener('DOMContentLoaded', function() {
            let currentCheckoutId = null;
            const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            const successModal = new bootstrap.Modal(document.getElementById('successModal'));

            // Initialize checkout
            function initCheckout() {
                const token = sessionStorage.getItem('jwt');
                if (!token) {
                    window.location.href = `/${getCurrentLocale()}/login`;
                    return;
                }

                loadCurrentCheckout();
            }

            // Load current checkout
            function loadCurrentCheckout() {
                const token = sessionStorage.getItem('jwt');
                const locale = getCurrentLocale();

                fetch(`/api/checkout?locale=${locale}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.checkout_id) {
                            currentCheckoutId = data.checkout_id;
                            updateOrderSummary(data);
                            if (data.shipping_address) {
                                populateAddressForm('shipping', data.shipping_address);
                            }
                            if (data.invoice_address) {
                                populateAddressForm('invoice', data.invoice_address);
                            }
                            if (data.payment_type) {
                                document.querySelector(`input[name="paymentType"][value="${data.payment_type}"]`).checked = true;
                            }
                        } else {
                            console.error('No active checkout found');
                        }
                    })
                    .catch(error => console.error('Error loading checkout:', error));
            }

            // Update checkout field
            function updateCheckoutField(field, value) {
                const token = sessionStorage.getItem('jwt');
                if (!token) return;

                let data = {};
                data[field] = value;

                fetch('/api/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.checkout_id) {
                            console.log('Checkout updated successfully');
                        } else {
                            console.error('Failed to update checkout');
                        }
                    })
                    .catch(error => console.error('Error updating checkout:', error));
            }

            // Place order
            function placeOrder() {
                if (!currentCheckoutId) {
                    showErrorModal('No active checkout found');
                    return;
                }

                if (!validateCheckout()) {
                    return;
                }

                const token = sessionStorage.getItem('jwt');
                const locale = getCurrentLocale();

                fetch(`/api/checkout/${currentCheckoutId}/place-order?locale=${locale}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.order_id) {
                            showSuccessModal(data.order_id);
                        } else {
                            showErrorModal(data.error || 'Failed to place order');
                        }
                    })
                    .catch(error => {
                        console.error('Error placing order:', error);
                        showErrorModal('Failed to place order');
                    });
            }

            // Helper functions
            function getAddressData(type) {
                return {
                    name: document.getElementById(`${type}Name`).value,
                    street: document.getElementById(`${type}Street`).value,
                    city: document.getElementById(`${type}City`).value,
                    postal_code: document.getElementById(`${type}Postal`).value
                };
            }

            function populateAddressForm(type, address) {
                try {
                    const addressData = typeof address === 'string' ? JSON.parse(address) : address;
                    document.getElementById(`${type}Name`).value = addressData.name || '';
                    document.getElementById(`${type}Street`).value = addressData.street || '';
                    document.getElementById(`${type}City`).value = addressData.city || '';
                    document.getElementById(`${type}Postal`).value = addressData.postal_code || '';
                } catch (e) {
                    console.error('Error populating address form:', e);
                }
            }

            function updateOrderSummary(data) {
                const container = document.getElementById('checkoutItems');
                container.innerHTML = '';

                data.items.forEach(item => {
                    const itemElement = document.createElement('div');
                    itemElement.className = 'mb-2';
                    itemElement.innerHTML = `
                        <div class="d-flex justify-content-between">
                            <span>${item.quantity}x ${item.title}</span>
                            <span>${item.amount.toFixed(2)} â‚¬</span>
                        </div>
                    `;
                    container.appendChild(itemElement);
                });

                document.getElementById('checkoutTotal').textContent = `${data.total_amount.toFixed(2)} â‚¬`;
            }

            function validateCheckout() {
                const shippingForm = document.getElementById('shippingAddressForm');
                const invoiceForm = document.getElementById('invoiceAddressForm');
                const sameAsShipping = document.getElementById('sameAsShipping');

                // Check shipping form
                const shippingInputs = shippingForm.querySelectorAll('input[required]');
                for (let input of shippingInputs) {
                    if (!input.value.trim()) {
                        showErrorModal('Please fill out all shipping address fields');
                        input.focus();
                        return false;
                    }
                }

                // Check invoice form if not same as shipping
                if (!sameAsShipping.checked) {
                    const invoiceInputs = invoiceForm.querySelectorAll('input[required]');
                    for (let input of invoiceInputs) {
                        if (!input.value.trim()) {
                            showErrorModal('Please fill out all invoice address fields');
                            input.focus();
                            return false;
                        }
                    }
                }

                return true;
            }

            function showErrorModal(message) {
                document.getElementById('errorModalBody').textContent = message;
                errorModal.show();
            }

            async function showSuccessModal(orderId) {
                const token = sessionStorage.getItem('jwt');
                try {
                    const response = await fetch(`/api/orders/${orderId}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch order details');
                    }

                    const data = await response.json();
                    const order = data.order;

                    const itemsHtml = order.items.map(item => `
                <tr>
                    <td>
                        <div class="fw-medium">${item.product.name}</div>
                        ${item.product.sku ? `<small class="text-muted">SKU: ${item.product.sku}</small>` : ''}
                    </td>
                    <td class="text-center">${item.quantity}</td>
                    <td class="text-end">${formatPrice(item.product.price)}</td>
                    <td class="text-end">${formatPrice(item.product.price * item.quantity)}</td>
                </tr>
            `).join('');

                    orderDetailsContent = document.getElementById('successModalBody');

                    orderDetailsContent.innerHTML = `
                <div class="order-details-section">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h5 class="mb-1">{{ 'orders.orderInfo'|trans }}</h5>
                            <p class="text-muted mb-0">
                                <i class="bi bi-calendar3"></i> ${new Date(order.createdAt).toLocaleDateString()}
                            </p>
                        </div>
                        <span class="status-badge ${getStatusBadgeClass(order.status)}">
                            ${getStatusTranslation(order.status)}
                        </span>
                    </div>
                </div>

                ${order.shippingAddress ? `
                    <div class="order-details-section">
                        <h6 class="mb-3">
                            <i class="bi bi-truck me-2"></i>
                            {{ 'orders.shippingAddress'|trans }}
                        </h6>
                        ${formatAddress(order.shippingAddress)}
                    </div>
                ` : ''}

                ${order.invoiceAddress ? `
                    <div class="order-details-section">
                        <h6 class="mb-3">
                            <i class="bi bi-file-text me-2"></i>
                            {{ 'orders.invoiceAddress'|trans }}
                        </h6>
                        ${formatAddress(order.invoiceAddress)}
                    </div>
                ` : ''}

                <div class="order-items-table">
                    <h6 class="mb-3">
                        <i class="bi bi-cart me-2"></i>
                        {{ 'orders.items'|trans }}
                    </h6>
                    <div class="table-responsive">
                        <table class="table">
                            <thead class="table-light">
                                <tr>
                                    <th>{{ 'orders.product'|trans }}</th>
                                    <th class="text-center">{{ 'orders.quantity'|trans }}</th>
                                    <th class="text-end">{{ 'orders.price'|trans }}</th>
                                    <th class="text-end">{{ 'orders.subtotal'|trans }}</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${itemsHtml}
                                <tr class="table-total-row">
                                    <td colspan="3" class="text-end">{{ 'orders.total'|trans }}</td>
                                    <td class="text-end">${formatPrice(order.finalPrice)}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                ${order.notes ? `
                    <div class="order-details-section mt-3">
                        <h6 class="mb-2">
                            <i class="bi bi-pencil me-2"></i>
                            {{ 'orders.notes'|trans }}
                        </h6>
                        <p class="mb-0">${order.notes}</p>
                    </div>
                ` : ''}
            `;


                    successModal.show();
                } catch (error) {
                    console.error('Error fetching order details:', error);
                    showErrorModal('Failed to load order details');
                }
            }

            function formatPrice(price) {
                return new Intl.NumberFormat('de-DE', {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(price);
            }

            function formatAddress(addressString) {
                try {
                    const address = JSON.parse(addressString);
                    return `
                <div class="address-block mb-2">
                    <p class="fw-medium mb-1">${address.name}</p>
                    <p class="mb-1">${address.street}</p>
                    <p class="mb-1">${address.city}, ${address.postal_code}</p>
                </div>
            `;
                } catch (e) {
                    return '';
                }
            }

            function getCurrentLocale() {
                return document.documentElement.lang || 'en';
            }

            // Event listeners
            document.getElementById('sameAsShipping').addEventListener('change', function(e) {
                const invoiceForm = document.getElementById('invoiceAddressForm');
                if (e.target.checked) {
                    invoiceForm.style.display = 'none';
                    updateCheckoutField('invoice_address', JSON.stringify(getAddressData('shipping')));
                } else {
                    invoiceForm.style.display = 'block';
                }
            });

            const addressInputs = document.querySelectorAll('#shippingAddressForm input, #invoiceAddressForm input');
            addressInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    let fieldName = this.id.replace('shipping', '').replace('invoice', '').toLowerCase();
                    let addressType = this.id.startsWith('shipping') ? 'shipping_address' : 'invoice_address';
                    let addressData = getAddressData(addressType.split('_')[0]);
                    updateCheckoutField(addressType, JSON.stringify(addressData));
                });
            });

            document.querySelectorAll('input[name="paymentType"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    updateCheckoutField('payment_type', this.value);
                });
            });

            document.getElementById('placeOrderBtn').addEventListener('click', placeOrder);

            document.querySelector('#edit-cart').addEventListener('click', function(e) {
                const cartModal = new bootstrap.Modal(document.getElementById('cartModal'));

                document.querySelector('.btn-close2').addEventListener('click', () => {
                    if (cartModal) {
                        cartModal.hide();
                    }
                });

                e.preventDefault();
                cartModal.show();
            });

            document.getElementById('dismissSuccessModal').addEventListener('click', function() {
                successModal.hide();
                window.location.href = `/${getCurrentLocale()}/`;
            });

            document.getElementById('close-error-modal').addEventListener('click', () => {
                if (errorModal) {
                    errorModal.hide();
                }
            });

            // Initialize checkout on page load
            initCheckout();
        });
    </script>
{% endblock %}
